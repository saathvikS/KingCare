// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3gFepDhbdVBaDHe3ms9CNF
// Component: XHeEqiOuKC

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: e0SGo-44ddg/component
import Tagline from "../../Tagline"; // plasmic-import: lHrnwZQKsB/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import { ParallaxWrapper } from "@plasmicpkgs/react-scroll-parallax"; // plasmic-import: bozP4lLlAZ/codeComponent
import Footer from "../../Footer"; // plasmic-import: EdywSuH81fY/component
import FooterBottom from "../../FooterBottom"; // plasmic-import: 5nUaKoc582/component

import { useScreenVariants as useScreenVariantsnTHrtOlDoRnz } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: nTHrtOLDoRNZ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_fbla_2023_website_design.module.css"; // plasmic-import: 3gFepDhbdVBaDHe3ms9CNF/projectcss
import sty from "./PlasmicAboutUs.module.css"; // plasmic-import: XHeEqiOuKC/css

import Icon29Icon from "./icons/PlasmicIcon__Icon29"; // plasmic-import: yC5RvH5pqG9N/icon
import screenShot20230202At90047PMpngMzPiqF6Rm from "./images/screenShot20230202At90047PMpng.png"; // plasmic-import: MZPiqF6Rm/picture
import facejpg5GrKgSZee from "./images/facejpg.jpeg"; // plasmic-import: 5GrKgSZee/picture

export type PlasmicAboutUs__VariantMembers = {};
export type PlasmicAboutUs__VariantsArgs = {};
type VariantPropType = keyof PlasmicAboutUs__VariantsArgs;
export const PlasmicAboutUs__VariantProps = new Array<VariantPropType>();

export type PlasmicAboutUs__ArgsType = {};
type ArgPropType = keyof PlasmicAboutUs__ArgsType;
export const PlasmicAboutUs__ArgProps = new Array<ArgPropType>();

export type PlasmicAboutUs__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  tagline?: p.Flex<typeof Tagline>;
  ourTeamSection?: p.Flex<"div">;
  serviceRow?: p.Flex<"div">;
  foreground3?: p.Flex<"div">;
  link?: p.Flex<"a">;
  footer?: p.Flex<typeof Footer>;
  footerBottom?: p.Flex<typeof FooterBottom>;
};

export interface DefaultAboutUsProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicAboutUs__RenderFunc(props: {
  variants: PlasmicAboutUs__VariantsArgs;
  args: PlasmicAboutUs__ArgsType;
  overrides: PlasmicAboutUs__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnTHrtOlDoRnz()
  });

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <Tagline
            data-plasmic-name={"tagline"}
            data-plasmic-override={overrides.tagline}
            className={classNames("__wab_instance", sty.tagline)}
            slot={
              "KingCare is a 501(c)(3) non-profit that provides educational services to the socioeconomically disadvantaged of King County. Since our inception in 2014, we have provided for more than 5,000 under-resourced residents and have given back over $400,000 to the community.\n"
            }
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gmZqT
              )}
            >
              {"About us"}
            </div>
          </Tagline>
          {true ? (
            <div
              data-plasmic-name={"ourTeamSection"}
              data-plasmic-override={overrides.ourTeamSection}
              className={classNames(projectcss.all, sty.ourTeamSection)}
            >
              <div className={classNames(projectcss.all, sty.columns__jp5Yl)}>
                <div className={classNames(projectcss.all, sty.column__nacWc)}>
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__saaup)}
                    duration={2000 as const}
                    triggerOnce={false}
                  >
                    <ParallaxWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.scrollParallax__jgLC
                      )}
                      speed={5 as const}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__lvTv
                        )}
                      >
                        {"Our team"}
                      </h2>
                    </ParallaxWrapper>
                  </Reveal>
                  <Reveal
                    cascade={true}
                    className={classNames("__wab_instance", sty.reveal__mkByg)}
                    damping={10 as const}
                    duration={2000 as const}
                    effect={"slide" as const}
                    reverse={false}
                    triggerOnce={false}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.columns__bxRRs)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__piHlL
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__hdnFy)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("auto" as const)
                              : ("336px" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("100%" as const)
                              : ("100%" as const)
                          }
                          loading={"lazy" as const}
                          src={{
                            src: screenShot20230202At90047PMpngMzPiqF6Rm,
                            fullWidth: 630,
                            fullHeight: 516,
                            aspectRatio: undefined
                          }}
                        />

                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : false
                        ) ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__rPgBr
                            )}
                          >
                            <h1
                              className={classNames(
                                projectcss.all,
                                projectcss.h1,
                                sty.h1__x23Um
                              )}
                            >
                              <h3
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h3,
                                  projectcss.__wab_text,
                                  sty.h3__yCaiV
                                )}
                              >
                                {"Anshu Aggarwal"}
                              </h3>
                            </h1>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__xSynK
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__pEfSy
                                )}
                              >
                                {"Co=Founder"}
                              </div>
                            </div>
                          </p.Stack>
                        ) : null}
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__b5LFw
                          )}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : true
                          ) ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__z0Qau
                              )}
                            >
                              <h1
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h1,
                                  sty.h1__y2Or
                                )}
                              >
                                <h3
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h3,
                                    projectcss.__wab_text,
                                    sty.h3__evxDq
                                  )}
                                >
                                  {"Anshu Aggarwal"}
                                </h3>
                              </h1>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__rjLDv
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__xgvv5
                                  )}
                                >
                                  {"Co-Founder"}
                                </div>
                              </div>
                            </p.Stack>
                          ) : null}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__ceCy3
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__yxJim)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("auto" as const)
                              : ("336px" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("100%" as const)
                              : ("100%" as const)
                          }
                          loading={"lazy" as const}
                          src={{
                            src: facejpg5GrKgSZee,
                            fullWidth: 2000,
                            fullHeight: 1500,
                            aspectRatio: undefined
                          }}
                        />

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__fxjmj
                          )}
                        >
                          <h1
                            className={classNames(
                              projectcss.all,
                              projectcss.h1,
                              sty.h1___8QpTd
                            )}
                          >
                            <h3
                              className={classNames(
                                projectcss.all,
                                projectcss.h3,
                                projectcss.__wab_text,
                                sty.h3__pai0S
                              )}
                            >
                              {"Saathvik Somujayabalan"}
                            </h3>
                          </h1>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ar6Ea
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dcgJr
                              )}
                            >
                              {"Co=Founder"}
                            </div>
                          </div>
                        </p.Stack>
                      </div>
                    </p.Stack>
                  </Reveal>
                </div>
              </div>
            </div>
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__ihl9U)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__bxEpl)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ffMn4)}
              >
                <Reveal
                  className={classNames("__wab_instance", sty.reveal__xciHs)}
                  duration={2000 as const}
                  triggerOnce={false}
                >
                  <ParallaxWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.scrollParallax__snZiz
                    )}
                    speed={5 as const}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___5ZXee
                      )}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__qkGb
                        )}
                      >
                        {"Our values"}
                      </h2>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__v6O0
                        )}
                      >
                        {""}
                      </div>
                    </p.Stack>
                  </ParallaxWrapper>
                </Reveal>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___7AfUy)}
                >
                  <ParallaxWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.scrollParallax__gtn9E
                    )}
                    previewInEditor={false}
                    speed={20 as const}
                  >
                    <Reveal
                      cascade={true}
                      className={classNames(
                        "__wab_instance",
                        sty.reveal__qLf0G
                      )}
                      damping={3 as const}
                      duration={2000 as const}
                      triggerOnce={false}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"serviceRow"}
                        data-plasmic-override={overrides.serviceRow}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.serviceRow)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__rGQJ
                          )}
                        >
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__rmwus
                              )}
                            >
                              <h3
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h3,
                                  sty.h3__wouuM
                                )}
                              >
                                <h3
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h3,
                                    projectcss.__wab_text,
                                    sty.h3__luncR
                                  )}
                                >
                                  {"Compassion"}
                                </h3>
                              </h3>
                              {true ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__lhuJz
                                  )}
                                />
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__eijMf
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__lzIqz
                                  )}
                                >
                                  {
                                    "Showing empathy and understanding towards those in need and treating them with dignity and respect."
                                  }
                                </div>
                              </div>
                            </p.Stack>
                          ) : null}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__jC8H
                          )}
                        >
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__onvl0
                              )}
                            >
                              <h3
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h3,
                                  sty.h3__tkkTz
                                )}
                              >
                                <h3
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h3,
                                    projectcss.__wab_text,
                                    sty.h3___68LYz
                                  )}
                                >
                                  {"Inclusiveness"}
                                </h3>
                              </h3>
                              {true ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__sdux5
                                  )}
                                />
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__e17IE
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__pi9Mm
                                  )}
                                >
                                  {
                                    "Creating a supportive and accepting environment for all individuals, regardless of their background or circumstances."
                                  }
                                </div>
                              </div>
                            </p.Stack>
                          ) : null}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__o33OH
                          )}
                        >
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__l858M
                              )}
                            >
                              <h3
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h3,
                                  sty.h3__rWxZ
                                )}
                              >
                                <h3
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h3,
                                    projectcss.__wab_text,
                                    sty.h3__fkzFa
                                  )}
                                >
                                  {"Empowerment"}
                                </h3>
                              </h3>
                              {true ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__jiOq5
                                  )}
                                />
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___4UqJ
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__eLqTj
                                  )}
                                >
                                  {
                                    "Encouraging individuals to reach their full potential and giving them the tools and resources to do so."
                                  }
                                </div>
                              </div>
                            </p.Stack>
                          ) : null}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__xu7Lu
                          )}
                        >
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___90Cn7
                              )}
                            >
                              <h3
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h3,
                                  sty.h3__gsskd
                                )}
                              >
                                <h3
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h3,
                                    projectcss.__wab_text,
                                    sty.h3__dy2Dh
                                  )}
                                >
                                  {"Accountability"}
                                </h3>
                              </h3>
                              {true ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__vNJ5
                                  )}
                                />
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__k07YJ
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__hlLi8
                                  )}
                                >
                                  {
                                    "Being responsible and transparent in all our actions and decisions."
                                  }
                                </div>
                              </div>
                            </p.Stack>
                          ) : null}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__sy5D3
                          )}
                        >
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__koAT
                              )}
                            >
                              <h3
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h3,
                                  sty.h3__y1Fmr
                                )}
                              >
                                <h3
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h3,
                                    projectcss.__wab_text,
                                    sty.h3__fo1BN
                                  )}
                                >
                                  {"Innovation"}
                                </h3>
                              </h3>
                              {true ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__jk9Gb
                                  )}
                                />
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__nlBd
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__ab0Qt
                                  )}
                                >
                                  {
                                    "Continuously seeking new and better ways to serve our communities."
                                  }
                                </div>
                              </div>
                            </p.Stack>
                          ) : null}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__ghaKq
                          )}
                        >
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__xzV9X
                              )}
                            >
                              <h3
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h3,
                                  sty.h3__tLoCn
                                )}
                              >
                                <h3
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h3,
                                    projectcss.__wab_text,
                                    sty.h3__gsUBd
                                  )}
                                >
                                  {"Collaboration"}
                                </h3>
                              </h3>
                              {true ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___0Acfk
                                  )}
                                />
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__kAlvc
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__h3Hdd
                                  )}
                                >
                                  {
                                    "Working together with partners, stakeholders, and community members to create collective impact."
                                  }
                                </div>
                              </div>
                            </p.Stack>
                          ) : null}
                        </div>
                      </p.Stack>
                    </Reveal>
                  </ParallaxWrapper>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__j0PN)}>
            <div className={classNames(projectcss.all, sty.freeBox__iX2Dk)}>
              <div className={classNames(projectcss.all, sty.freeBox__tQwYo)}>
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"foreground3"}
                  data-plasmic-override={overrides.foreground3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.foreground3)}
                >
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__uCi83)}
                    duration={2000 as const}
                    triggerOnce={false}
                  >
                    <ParallaxWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.scrollParallax__y5YsQ
                      )}
                      speed={5 as const}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___3WyV7
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__lWOpb
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "Work with us."
                            : "Work with us"}
                        </h2>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fZtEo
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "Rapidiously revolutionize future-proof niches, and authoritatively \nrestore user-centric e-markets."
                            : "Join us to work towards a healthier and more inclusive community."}
                        </div>
                      </p.Stack>
                    </ParallaxWrapper>
                  </Reveal>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__oacat)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__bFePz)}
                    >
                      <p.Stack
                        as={"a"}
                        data-plasmic-name={"link"}
                        data-plasmic-override={overrides.link}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link
                        )}
                        href={`/take-action`}
                      >
                        {false ? (
                          <Icon29Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__ajOiO
                            )}
                            role={"img"}
                          />
                        ) : null}
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___4BvLu
                          )}
                        >
                          {"Volunteer Opportunities"}
                        </div>
                        {false ? (
                          <Icon29Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__czvoj
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </div>
            </div>
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />

          <FooterBottom
            data-plasmic-name={"footerBottom"}
            data-plasmic-override={overrides.footerBottom}
            className={classNames("__wab_instance", sty.footerBottom)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "tagline",
    "ourTeamSection",
    "serviceRow",
    "foreground3",
    "link",
    "footer",
    "footerBottom"
  ],
  header: ["header"],
  tagline: ["tagline"],
  ourTeamSection: ["ourTeamSection"],
  serviceRow: ["serviceRow"],
  foreground3: ["foreground3", "link"],
  link: ["link"],
  footer: ["footer"],
  footerBottom: ["footerBottom"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  tagline: typeof Tagline;
  ourTeamSection: "div";
  serviceRow: "div";
  foreground3: "div";
  link: "a";
  footer: typeof Footer;
  footerBottom: typeof FooterBottom;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAboutUs__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAboutUs__VariantsArgs;
    args?: PlasmicAboutUs__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAboutUs__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAboutUs__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAboutUs__ArgProps,
          internalVariantPropNames: PlasmicAboutUs__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAboutUs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAboutUs";
  } else {
    func.displayName = `PlasmicAboutUs.${nodeName}`;
  }
  return func;
}

export const PlasmicAboutUs = Object.assign(
  // Top-level PlasmicAboutUs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    tagline: makeNodeComponent("tagline"),
    ourTeamSection: makeNodeComponent("ourTeamSection"),
    serviceRow: makeNodeComponent("serviceRow"),
    foreground3: makeNodeComponent("foreground3"),
    link: makeNodeComponent("link"),
    footer: makeNodeComponent("footer"),
    footerBottom: makeNodeComponent("footerBottom"),

    // Metadata about props expected for PlasmicAboutUs
    internalVariantProps: PlasmicAboutUs__VariantProps,
    internalArgProps: PlasmicAboutUs__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAboutUs;
/* prettier-ignore-end */
