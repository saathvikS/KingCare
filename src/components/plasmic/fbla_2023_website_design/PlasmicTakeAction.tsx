// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3gFepDhbdVBaDHe3ms9CNF
// Component: xTZIRSRPVMm

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: e0SGo-44ddg/component
import Tagline from "../../Tagline"; // plasmic-import: lHrnwZQKsB/component
import { ParallaxWrapper } from "@plasmicpkgs/react-scroll-parallax"; // plasmic-import: bozP4lLlAZ/codeComponent
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import Slider from "react-slick"; // plasmic-import: HOQUyOpClJ/codeComponent
import Button from "../../Button"; // plasmic-import: GnNzqwgKsTt/component
import Footer from "../../Footer"; // plasmic-import: EdywSuH81fY/component
import FooterBottom from "../../FooterBottom"; // plasmic-import: 5nUaKoc582/component

import { useScreenVariants as useScreenVariantsnTHrtOlDoRnz } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: nTHrtOLDoRNZ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_fbla_2023_website_design.module.css"; // plasmic-import: 3gFepDhbdVBaDHe3ms9CNF/projectcss
import sty from "./PlasmicTakeAction.module.css"; // plasmic-import: xTZIRSRPVMm/css

import Icon29Icon from "./icons/PlasmicIcon__Icon29"; // plasmic-import: yC5RvH5pqG9N/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: hQ6DylM3FaV/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: AFYVcv3lQLV/icon
import kingcareTshirtpng4MyqCvz2N from "./images/kingcareTshirtpng.png"; // plasmic-import: 4MYQCvz2N/picture
import kingcareHoodiepng8PIh4Sm9U from "./images/kingcareHoodiepng.png"; // plasmic-import: 8pIH4sm9u/picture
import kingcareBackpackpngL3TtYkib8 from "./images/kingcareBackpackpng.png"; // plasmic-import: L3TtYKIB8/picture
import kingcareHatpngUwCeMBvph from "./images/kingcareHatpng.png"; // plasmic-import: UWCeMBvph/picture

export type PlasmicTakeAction__VariantMembers = {};
export type PlasmicTakeAction__VariantsArgs = {};
type VariantPropType = keyof PlasmicTakeAction__VariantsArgs;
export const PlasmicTakeAction__VariantProps = new Array<VariantPropType>();

export type PlasmicTakeAction__ArgsType = {};
type ArgPropType = keyof PlasmicTakeAction__ArgsType;
export const PlasmicTakeAction__ArgProps = new Array<ArgPropType>();

export type PlasmicTakeAction__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  tagline?: p.Flex<typeof Tagline>;
  donate?: p.Flex<"div">;
  foreground3?: p.Flex<"div">;
  link?: p.Flex<"a">;
  merchandise?: p.Flex<"div">;
  slider?: p.Flex<typeof Slider>;
  volunteer?: p.Flex<"div">;
  serviceRow2?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
  footerBottom?: p.Flex<typeof FooterBottom>;
};

export interface DefaultTakeActionProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicTakeAction__RenderFunc(props: {
  variants: PlasmicTakeAction__VariantsArgs;
  args: PlasmicTakeAction__ArgsType;
  overrides: PlasmicTakeAction__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnTHrtOlDoRnz()
  });

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <Tagline
            data-plasmic-name={"tagline"}
            data-plasmic-override={overrides.tagline}
            className={classNames("__wab_instance", sty.tagline)}
            slot={
              "Our mission can only be fulfilled if we all join hands together. Any help that you may be able to provide will help further our cause. Learn more about the volunteer opportunities we have and if you wish to do so, please donate any amount you can."
            }
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mbpAd
              )}
            >
              {"Take Action"}
            </div>
          </Tagline>
          <div
            data-plasmic-name={"donate"}
            data-plasmic-override={overrides.donate}
            className={classNames(projectcss.all, sty.donate)}
          >
            <ParallaxWrapper
              className={classNames(
                "__wab_instance",
                sty.scrollParallax__uuk3W
              )}
              speed={5 as const}
            >
              <Reveal
                className={classNames("__wab_instance", sty.reveal__iDUv)}
                duration={2000 as const}
                triggerOnce={false}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"foreground3"}
                  data-plasmic-override={overrides.foreground3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.foreground3)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ewg7D)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__uf3EC
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Donate"
                        : "Donate"}
                    </h2>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eyvfw
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Suggested donation of twenty-five dollars. Thank you for your kindness!"
                        : "Suggested donation of twenty-five dollars. Thank you for your kindness!"}
                    </div>
                  </p.Stack>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__jDb12)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__ikQnQ)}
                    >
                      <p.Stack
                        as={"a"}
                        data-plasmic-name={"link"}
                        data-plasmic-override={overrides.link}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link
                        )}
                        href={
                          "https://donate.stripe.com/test_dR66sqdTmaeC28ofYY" as const
                        }
                        target={"_blank" as const}
                      >
                        {false ? (
                          <Icon29Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__w4EC3
                            )}
                            role={"img"}
                          />
                        ) : null}
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rBwoh
                          )}
                        >
                          {"Donate now!"}
                        </div>
                        {false ? (
                          <Icon29Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__vc5W3
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </Reveal>
            </ParallaxWrapper>
          </div>
          {true ? (
            <div
              data-plasmic-name={"merchandise"}
              data-plasmic-override={overrides.merchandise}
              className={classNames(projectcss.all, sty.merchandise)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__olz4R)}
              >
                <Reveal
                  className={classNames("__wab_instance", sty.reveal__xnd7B)}
                  duration={2000 as const}
                  triggerOnce={false}
                >
                  <ParallaxWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.scrollParallax__ml9Al
                    )}
                    speed={5 as const}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__vl6G4)}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2___2Ro71
                        )}
                        id={"volunteer" as const}
                      >
                        {"Merchandise"}
                      </h2>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__szNoo
                        )}
                      >
                        {
                          "Support our cause while getting something in return. Choose from our array of cool swag and show off your support for KingCare!"
                        }
                      </div>
                    </p.Stack>
                    <Slider
                      data-plasmic-name={"slider"}
                      data-plasmic-override={overrides.slider}
                      autoplay={true}
                      autoplaySpeed={2000 as const}
                      centerMode={false}
                      className={classNames("__wab_instance", sty.slider)}
                      dots={true}
                      draggable={false}
                      pauseOnDotsHover={true}
                      pauseOnFocus={false}
                      pauseOnHover={false}
                      slidesToShow={3 as const}
                      useCSS={true}
                      useTransform={true}
                      variableWidth={false}
                      vertical={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : undefined
                      }
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__rVpPv
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__e4RFq)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("100%" as const)
                                : ("507px" as const)
                            }
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"100%" as const}
                            src={{
                              src: kingcareTshirtpng4MyqCvz2N,
                              fullWidth: 874,
                              fullHeight: 1051,
                              aspectRatio: undefined
                            }}
                          />

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__vYdu
                            )}
                            link={
                              "https://king-care.swell.store/buy/n35KjuA6" as const
                            }
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__cT2Kl
                              )}
                            >
                              {"Buy Now"}
                            </div>
                          </Button>
                        </div>
                      ) : null}
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yuGv
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__q04Mh)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("100%" as const)
                                : ("507px" as const)
                            }
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"100%" as const}
                            src={{
                              src: kingcareHoodiepng8PIh4Sm9U,
                              fullWidth: 967,
                              fullHeight: 1048,
                              aspectRatio: undefined
                            }}
                          />

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__lgCtm
                            )}
                            link={
                              "https://king-care.swell.store/buy/8LjVbBbu" as const
                            }
                          >
                            {"Buy Now"}
                          </Button>
                        </div>
                      ) : null}
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ieipZ
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__xgmAb)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("100%" as const)
                                : ("507px" as const)
                            }
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"auto" as const}
                            src={{
                              src: kingcareBackpackpngL3TtYkib8,
                              fullWidth: 874,
                              fullHeight: 940,
                              aspectRatio: undefined
                            }}
                          />

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button___4LD4
                            )}
                            link={
                              "https://king-care.swell.store/buy/e9DVv1q5" as const
                            }
                          >
                            {"Buy Now"}
                          </Button>
                        </div>
                      ) : null}
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__akuK2
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__pVuRp)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("100%" as const)
                                : ("507px" as const)
                            }
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"auto" as const}
                            src={{
                              src: kingcareHatpngUwCeMBvph,
                              fullWidth: 1294,
                              fullHeight: 786,
                              aspectRatio: undefined
                            }}
                          />

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__zwuaj
                            )}
                            link={
                              "https://king-care.swell.store/buy/LvD9DWQx" as const
                            }
                          >
                            {"Buy Now"}
                          </Button>
                        </div>
                      ) : null}
                    </Slider>
                  </ParallaxWrapper>
                </Reveal>
              </p.Stack>
            </div>
          ) : null}
          <div
            data-plasmic-name={"volunteer"}
            data-plasmic-override={overrides.volunteer}
            className={classNames(projectcss.all, sty.volunteer)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__xIxRo)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___3A4Bl)}
              >
                <Reveal
                  className={classNames("__wab_instance", sty.reveal__qbBNw)}
                  duration={2000 as const}
                  triggerOnce={false}
                >
                  <ParallaxWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.scrollParallax__iqtud
                    )}
                    speed={5 as const}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___7IUmz
                      )}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__yT2BW
                        )}
                        id={"volunteer" as const}
                      >
                        {"Volunteer Opportunities"}
                      </h2>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8Xy5L
                        )}
                      >
                        {
                          "Here is the list of volunteer opportunities KingCare is offering at this moment. Make sure to come to one of our locations or email us to learn more about an opportunity. "
                        }
                      </div>
                    </p.Stack>
                  </ParallaxWrapper>
                </Reveal>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___9MHn)}
                >
                  <ParallaxWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.scrollParallax__eozR1
                    )}
                    previewInEditor={false}
                    speed={20 as const}
                  >
                    <Reveal
                      cascade={true}
                      className={classNames(
                        "__wab_instance",
                        sty.reveal__qpOe2
                      )}
                      damping={3 as const}
                      duration={undefined}
                      triggerOnce={false}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"serviceRow2"}
                        data-plasmic-override={overrides.serviceRow2}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.serviceRow2)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__b4Eb
                          )}
                        >
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__iXh1L
                              )}
                            >
                              <h3
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h3,
                                  sty.h3__tzVnF
                                )}
                              >
                                <h3
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h3,
                                    projectcss.__wab_text,
                                    sty.h3___31ZXe
                                  )}
                                >
                                  {"Marketing Director"}
                                </h3>
                              </h3>
                              {true ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__i0RwR
                                  )}
                                />
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___7VEc
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___3Hnax
                                  )}
                                >
                                  {
                                    "Lead KingCare's marketing operations and help spread the word out to many."
                                  }
                                </div>
                              </div>
                            </p.Stack>
                          ) : null}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column___1XBg
                          )}
                        >
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__izLKo
                              )}
                            >
                              <h3
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h3,
                                  sty.h3__ck391
                                )}
                              >
                                <h3
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h3,
                                    projectcss.__wab_text,
                                    sty.h3__mb1HB
                                  )}
                                >
                                  {"Auditor"}
                                </h3>
                              </h3>
                              {true ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__fvmpq
                                  )}
                                />
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__wkHZg
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__fjyeu
                                  )}
                                >
                                  {
                                    "Help KingCare as an organization to keep track of profits and taxes."
                                  }
                                </div>
                              </div>
                            </p.Stack>
                          ) : null}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column___7Hudl
                          )}
                        >
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__or0L
                              )}
                            >
                              <h3
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h3,
                                  sty.h3__r8OdV
                                )}
                              >
                                <h3
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h3,
                                    projectcss.__wab_text,
                                    sty.h3__iK3Ze
                                  )}
                                >
                                  {"Fundraising"}
                                </h3>
                              </h3>
                              {true ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__jiHid
                                  )}
                                />
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__aiGc
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__t7UF
                                  )}
                                >
                                  {
                                    "Help KingCare raise money to maintain and add future services crucial in bridging the inequality gap between residents."
                                  }
                                </div>
                              </div>
                            </p.Stack>
                          ) : null}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column___0BYyk
                          )}
                        >
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ilPbi
                              )}
                            >
                              <h3
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h3,
                                  sty.h3__btVyL
                                )}
                              >
                                <h3
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h3,
                                    projectcss.__wab_text,
                                    sty.h3__r22P6
                                  )}
                                >
                                  {"IT Management"}
                                </h3>
                              </h3>
                              {true ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__tmh4X
                                  )}
                                />
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__mO3C
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__vjKmq
                                  )}
                                >
                                  {
                                    "Manage and update the website regularly and make sure technology runs smoothly."
                                  }
                                </div>
                              </div>
                            </p.Stack>
                          ) : null}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__tinpW
                          )}
                        >
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__zkJgq
                              )}
                            >
                              <h3
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h3,
                                  sty.h3__xyCv1
                                )}
                              >
                                <h3
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h3,
                                    projectcss.__wab_text,
                                    sty.h3__cpSN
                                  )}
                                >
                                  {"Peer Tutoring"}
                                </h3>
                              </h3>
                              {true ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__twLo0
                                  )}
                                />
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__re0S3
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__o1HqI
                                  )}
                                >
                                  {
                                    "Help kids and adults that are in need of tutoring or education in math, science, english, and social studies."
                                  }
                                </div>
                              </div>
                            </p.Stack>
                          ) : null}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column___7HW0X
                          )}
                        >
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__pjzKv
                              )}
                            >
                              <h3
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h3,
                                  sty.h3___4XR4A
                                )}
                              >
                                <h3
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h3,
                                    projectcss.__wab_text,
                                    sty.h3___0TBy
                                  )}
                                >
                                  {"Connection Agent"}
                                </h3>
                              </h3>
                              {true ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__cL6S
                                  )}
                                />
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__wkg3V
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__renBx
                                  )}
                                >
                                  {
                                    "Work directly with affected residents to make their quality of life better and connect them with access to a service they are in need of."
                                  }
                                </div>
                              </div>
                            </p.Stack>
                          ) : null}
                        </div>
                      </p.Stack>
                    </Reveal>
                  </ParallaxWrapper>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />

          <FooterBottom
            data-plasmic-name={"footerBottom"}
            data-plasmic-override={overrides.footerBottom}
            className={classNames("__wab_instance", sty.footerBottom)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "tagline",
    "donate",
    "foreground3",
    "link",
    "merchandise",
    "slider",
    "volunteer",
    "serviceRow2",
    "footer",
    "footerBottom"
  ],
  header: ["header"],
  tagline: ["tagline"],
  donate: ["donate", "foreground3", "link"],
  foreground3: ["foreground3", "link"],
  link: ["link"],
  merchandise: ["merchandise", "slider"],
  slider: ["slider"],
  volunteer: ["volunteer", "serviceRow2"],
  serviceRow2: ["serviceRow2"],
  footer: ["footer"],
  footerBottom: ["footerBottom"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  tagline: typeof Tagline;
  donate: "div";
  foreground3: "div";
  link: "a";
  merchandise: "div";
  slider: typeof Slider;
  volunteer: "div";
  serviceRow2: "div";
  footer: typeof Footer;
  footerBottom: typeof FooterBottom;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTakeAction__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTakeAction__VariantsArgs;
    args?: PlasmicTakeAction__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTakeAction__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTakeAction__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTakeAction__ArgProps,
          internalVariantPropNames: PlasmicTakeAction__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTakeAction__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTakeAction";
  } else {
    func.displayName = `PlasmicTakeAction.${nodeName}`;
  }
  return func;
}

export const PlasmicTakeAction = Object.assign(
  // Top-level PlasmicTakeAction renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    tagline: makeNodeComponent("tagline"),
    donate: makeNodeComponent("donate"),
    foreground3: makeNodeComponent("foreground3"),
    link: makeNodeComponent("link"),
    merchandise: makeNodeComponent("merchandise"),
    slider: makeNodeComponent("slider"),
    volunteer: makeNodeComponent("volunteer"),
    serviceRow2: makeNodeComponent("serviceRow2"),
    footer: makeNodeComponent("footer"),
    footerBottom: makeNodeComponent("footerBottom"),

    // Metadata about props expected for PlasmicTakeAction
    internalVariantProps: PlasmicTakeAction__VariantProps,
    internalArgProps: PlasmicTakeAction__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicTakeAction;
/* prettier-ignore-end */
